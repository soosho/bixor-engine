openapi: 3.0.3
info:
  title: Bixor Exchange API
  description: |
    High-performance cryptocurrency exchange API with real-time trading, WebSocket support, and comprehensive security features.
    
    ## Authentication
    
    The API supports multiple authentication methods:
    
    1. **JWT Bearer Token** - For web applications and user sessions
    2. **API Key** - For programmatic access and trading bots
    
    ### JWT Authentication
    ```
    Authorization: Bearer <your_jwt_token>
    ```
    
    ### API Key Authentication
    ```
    X-API-Key: <your_api_key>
    X-API-Secret: <your_api_secret>
    ```
    
    ## Rate Limiting
    
    All endpoints are rate limited to ensure fair usage:
    
    - **Public endpoints**: 1000 requests/minute
    - **Trading endpoints**: 10 requests/second per user
    - **General authenticated endpoints**: 100 requests/minute per IP
    
    Rate limit headers are included in responses:
    - `X-RateLimit-Limit`: Request limit per window
    - `X-RateLimit-Remaining`: Remaining requests in current window
    - `X-RateLimit-Reset`: Unix timestamp when the window resets
    
    ## WebSocket API
    
    Real-time data is available via WebSocket at `/api/v1/ws`
    
    ### Subscription Channels
    - `orderbook.<market_id>` - Order book updates
    - `trades.<market_id>` - Trade updates  
    - `user_orders` - User order updates (requires auth)
    - `user_balances` - User balance updates (requires auth)
    
    ## Error Handling
    
    The API uses conventional HTTP response codes and returns JSON error objects:
    
    ```json
    {
      "error": "Error message",
      "details": "Additional error details"
    }
    ```

  version: 1.0.0
  contact:
    name: Bixor Exchange Support
    email: support@bixor.exchange
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.bixor.exchange
    description: Production server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  # Health Check
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the service is healthy
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  service:
                    type: string
                    example: bixor-engine
                  version:
                    type: string
                    example: 1.0.0

  # Authentication Endpoints
  /api/v1/auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  user_id:
                    type: integer
                    example: 123
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          $ref: '#/components/responses/ConflictError'

  /api/v1/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT tokens
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokens:
                    $ref: '#/components/schemas/TokenPair'
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/ValidationError'

  /api/v1/auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidate user session and optionally logout from all devices
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                logout_all:
                  type: boolean
                  description: Logout from all devices
                  example: false
                revoke_api_keys:
                  type: boolean
                  description: Revoke all API keys
                  example: false
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout successful
                  logged_out_all_devices:
                    type: boolean
                  api_keys_revoked:
                    type: boolean

  /api/v1/auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      description: Get new access token using refresh token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  description: Valid refresh token
              required:
                - refresh_token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokens:
                    $ref: '#/components/schemas/TokenPair'

  /api/v1/auth/profile:
    get:
      tags:
        - Authentication
      summary: Get user profile
      description: Get current user's profile information
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'

  # 2FA Endpoints
  /api/v1/auth/2fa/enable:
    post:
      tags:
        - Two-Factor Authentication
      summary: Enable 2FA
      description: Initialize 2FA setup and get QR code
      responses:
        '200':
          description: 2FA setup initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  secret:
                    type: string
                    description: TOTP secret key
                  qr_url:
                    type: string
                    description: QR code URL for setup
                  backup_codes:
                    type: array
                    items:
                      $ref: '#/components/schemas/BackupCode'
                  message:
                    type: string

  /api/v1/auth/2fa/verify:
    post:
      tags:
        - Two-Factor Authentication
      summary: Verify and enable 2FA
      description: Verify TOTP code and enable 2FA
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                totp_code:
                  type: string
                  pattern: '^[0-9]{6}$'
                  description: 6-digit TOTP code
              required:
                - totp_code
      responses:
        '200':
          description: 2FA enabled successfully

  /api/v1/auth/2fa/disable:
    post:
      tags:
        - Two-Factor Authentication
      summary: Disable 2FA
      description: Disable two-factor authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                totp_code:
                  type: string
                  pattern: '^[0-9]{6}$'
                  description: 6-digit TOTP code
              required:
                - totp_code
      responses:
        '200':
          description: 2FA disabled successfully

  # API Key Management
  /api/v1/auth/api-keys:
    post:
      tags:
        - API Keys
      summary: Create API key
      description: Create a new API key for programmatic access
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name for the API key
                  example: Trading Bot Key
                permissions:
                  type: array
                  items:
                    type: string
                    enum: [read, trade, withdraw]
                  description: Permissions for the API key
                expires_at:
                  type: string
                  format: date-time
                  description: Optional expiration date
              required:
                - name
      responses:
        '201':
          description: API key created
          content:
            application/json:
              schema:
                type: object
                properties:
                  key_id:
                    type: string
                  secret:
                    type: string
                    description: Store securely - won't be shown again
                  api_key:
                    $ref: '#/components/schemas/APIKey'

    get:
      tags:
        - API Keys
      summary: List API keys
      description: Get list of user's API keys
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/APIKey'

  /api/v1/auth/api-keys/{key_id}:
    delete:
      tags:
        - API Keys
      summary: Revoke API key
      description: Revoke an API key
      parameters:
        - name: key_id
          in: path
          required: true
          schema:
            type: string
          description: API key ID to revoke
      responses:
        '200':
          description: API key revoked

  # Markets
  /api/v1/markets:
    get:
      tags:
        - Markets
      summary: Get all markets
      description: Get list of all available trading markets
      security: []
      responses:
        '200':
          description: List of markets
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Market'

  /api/v1/markets/{marketId}:
    get:
      tags:
        - Markets
      summary: Get market details
      description: Get details for a specific market
      security: []
      parameters:
        - name: marketId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3,10}-[A-Z]{3,10}$'
            example: BTC-USDT
          description: Market symbol (e.g., BTC-USDT)
      responses:
        '200':
          description: Market details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Market'

  /api/v1/markets/{marketId}/orderbook:
    get:
      tags:
        - Markets
      summary: Get order book
      description: Get order book depth for a market
      security: []
      parameters:
        - name: marketId
          in: path
          required: true
          schema:
            type: string
          description: Market symbol
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
          description: Number of price levels to return
      responses:
        '200':
          description: Order book data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/OrderBook'

  /api/v1/markets/{marketId}/trades:
    get:
      tags:
        - Markets
      summary: Get recent trades
      description: Get recent trades for a market
      security: []
      parameters:
        - name: marketId
          in: path
          required: true
          schema:
            type: string
          description: Market symbol
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
          description: Number of trades to return
      responses:
        '200':
          description: Recent trades
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Trade'

  /api/v1/markets/{marketId}/stats:
    get:
      tags:
        - Markets
      summary: Get market statistics
      description: Get 24h statistics for a market
      security: []
      parameters:
        - name: marketId
          in: path
          required: true
          schema:
            type: string
          description: Market symbol
      responses:
        '200':
          description: Market statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/MarketStats'

  /api/v1/markets/{marketId}/klines:
    get:
      tags:
        - Markets
      summary: Get candlestick data
      description: Get OHLCV candlestick data for a market
      security: []
      parameters:
        - name: marketId
          in: path
          required: true
          schema:
            type: string
          description: Market symbol
        - name: interval
          in: query
          schema:
            type: string
            enum: [1m, 5m, 15m, 30m, 1h, 4h, 1d, 1w]
            default: 1m
          description: Candlestick interval
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
          description: Number of candlesticks to return
      responses:
        '200':
          description: Candlestick data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      market_id:
                        type: string
                      interval:
                        type: string
                      limit:
                        type: integer
                      klines:
                        type: array
                        items:
                          $ref: '#/components/schemas/Kline'

  # Trading
  /api/v1/orders:
    post:
      tags:
        - Trading
      summary: Create order
      description: Create a new trading order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/ValidationError'

    get:
      tags:
        - Trading
      summary: Get orders
      description: Get user's orders with optional filtering
      parameters:
        - name: market_id
          in: query
          schema:
            type: string
          description: Filter by market
        - name: status
          in: query
          schema:
            type: string
            enum: [open, filled, cancelled, pending, failed]
          description: Filter by order status
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'

    delete:
      tags:
        - Trading
      summary: Cancel all orders
      description: Cancel all open orders for the user
      responses:
        '200':
          description: Orders cancelled
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  count:
                    type: integer
                    description: Number of orders cancelled

  /api/v1/orders/{orderId}:
    get:
      tags:
        - Trading
      summary: Get order
      description: Get details of a specific order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: Order ID
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Order'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Trading
      summary: Cancel order
      description: Cancel a specific order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: Order ID to cancel
      responses:
        '200':
          description: Order cancelled
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Order'

  /api/v1/orders/history:
    get:
      tags:
        - Trading
      summary: Get order history
      description: Get user's complete order history
      parameters:
        - name: market_id
          in: query
          schema:
            type: string
          description: Filter by market
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Order history
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'

  # User Data
  /api/v1/users/me/balances:
    get:
      tags:
        - User
      summary: Get user balances
      description: Get current user's asset balances
      responses:
        '200':
          description: User balances
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Balance'

  /api/v1/users/me/orders:
    get:
      tags:
        - User
      summary: Get user orders
      description: Get current user's orders
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [open, filled, cancelled, pending, failed]
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: User orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'

  /api/v1/users/me/trades:
    get:
      tags:
        - User
      summary: Get user trades
      description: Get current user's trade history
      parameters:
        - name: market_id
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: User trades
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Trade'

  # WebSocket
  /api/v1/ws:
    get:
      tags:
        - WebSocket
      summary: WebSocket connection
      description: |
        WebSocket endpoint for real-time data streams.
        
        **Connection:** `ws://localhost:8080/api/v1/ws`
        
        **Authentication:** Optional - include JWT token as query parameter or in Authorization header
        
        **Message Format:**
        ```json
        {
          "type": "subscribe",
          "channel": "orderbook.BTC-USDT"
        }
        ```
        
        **Available Channels:**
        - `orderbook` - All markets order book updates
        - `orderbook.<market_id>` - Specific market order book
        - `trades.<market_id>` - Market trade updates
        - `user_orders` - User order updates (auth required)
        - `user_balances` - User balance updates (auth required)
        
        **Response Messages:**
        - `orderbook_update` - Order book changes
        - `trade_update` - New trades
        - `order_update` - Order status changes
        - `balance_update` - Balance changes
        - `ping/pong` - Connection heartbeat
      responses:
        '101':
          description: WebSocket connection established
        '400':
          description: Bad request (invalid WebSocket upgrade)
        '401':
          description: Unauthorized (for authenticated channels)

  # Admin Endpoints
  /admin/health/database:
    get:
      tags:
        - Admin
      summary: Database health check
      description: Check database connectivity (admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Database is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
        '503':
          description: Database is unhealthy

  /admin/health/redis:
    get:
      tags:
        - Admin
      summary: Redis health check
      description: Check Redis connectivity (admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Redis is healthy
        '503':
          description: Redis is unhealthy

  /admin/metrics:
    get:
      tags:
        - Admin
      summary: System metrics
      description: Get system metrics and statistics (admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: System metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      users:
                        type: integer
                        description: Total number of users
                      orders:
                        type: integer
                        description: Total number of orders
                      trades:
                        type: integer
                        description: Total number of trades
                      uptime:
                        type: string
                        format: date-time
                        description: Server start time

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login
    
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        API Key authentication requires both X-API-Key and X-API-Secret headers:
        - X-API-Key: Your API key ID
        - X-API-Secret: Your API secret

  schemas:
    # Authentication Schemas
    RegisterRequest:
      type: object
      required:
        - email
        - username
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        username:
          type: string
          pattern: '^[a-zA-Z0-9_-]{3,50}$'
          example: trader123
        password:
          type: string
          minLength: 8
          example: SecurePass123!
        first_name:
          type: string
          maxLength: 50
          example: John
        last_name:
          type: string
          maxLength: 50
          example: Doe

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          example: SecurePass123!
        totp_code:
          type: string
          pattern: '^[0-9]{6}$'
          description: Required if 2FA is enabled
          example: "123456"
        backup_code:
          type: string
          description: Alternative to TOTP code
          example: "ABCD1234"

    TokenPair:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: Refresh token for getting new access tokens
        expires_at:
          type: integer
          format: int64
          description: Unix timestamp when access token expires
        token_type:
          type: string
          example: Bearer

    User:
      type: object
      properties:
        id:
          type: integer
          example: 123
        email:
          type: string
          format: email
          example: user@example.com
        username:
          type: string
          example: trader123
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        role:
          type: string
          enum: [user, trader, admin, super_admin]
          example: user
        is_active:
          type: boolean
          example: true
        is_verified:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    BackupCode:
      type: object
      properties:
        code:
          type: string
          example: "ABCD1234"
        used:
          type: boolean
          example: false
        used_at:
          type: string
          format: date-time
          nullable: true

    APIKey:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: Trading Bot Key
        key_id:
          type: string
          example: ak_1234567890abcdef
        permissions:
          type: string
          description: JSON array of permissions
          example: '["read", "trade"]'
        is_active:
          type: boolean
        last_used_at:
          type: string
          format: date-time
          nullable: true
        expires_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time

    # Market Schemas
    Market:
      type: object
      properties:
        id:
          type: string
          example: BTC-USDT
        base_asset:
          type: string
          example: BTC
        quote_asset:
          type: string
          example: USDT
        is_active:
          type: boolean
          example: true
        min_size:
          type: string
          description: Minimum order size
          example: "0.00001"
        max_size:
          type: string
          description: Maximum order size
          example: "1000"
        price_precision:
          type: integer
          description: Number of decimal places for price
          example: 2
        size_precision:
          type: integer
          description: Number of decimal places for size
          example: 8
        taker_fee:
          type: string
          description: Taker fee rate
          example: "0.001"
        maker_fee:
          type: string
          description: Maker fee rate
          example: "0.001"

    OrderBook:
      type: object
      properties:
        market_id:
          type: string
          example: BTC-USDT
        bids:
          type: array
          description: Buy orders (highest price first)
          items:
            $ref: '#/components/schemas/OrderBookLevel'
        asks:
          type: array
          description: Sell orders (lowest price first)
          items:
            $ref: '#/components/schemas/OrderBookLevel'
        timestamp:
          type: integer
          format: int64
          description: Unix timestamp

    OrderBookLevel:
      type: object
      properties:
        price:
          type: string
          example: "50000.00"
        size:
          type: string
          example: "1.5"

    MarketStats:
      type: object
      properties:
        market_id:
          type: string
          example: BTC-USDT
        last_price:
          type: string
          example: "50000.00"
        price_change:
          type: string
          example: "1250.00"
        price_change_percent:
          type: string
          example: "2.56"
        high_24h:
          type: string
          example: "51000.00"
        low_24h:
          type: string
          example: "48000.00"
        volume_24h:
          type: string
          example: "1234567.89"
        timestamp:
          type: string
          format: date-time

    Kline:
      type: array
      description: OHLCV candlestick data [timestamp, open, high, low, close, volume]
      items:
        oneOf:
          - type: integer
            format: int64
            description: Unix timestamp
          - type: string
            description: Price or volume as decimal string
      example: [1640995200, "50000.00", "50500.00", "49800.00", "50200.00", "123.45"]

    # Trading Schemas
    CreateOrderRequest:
      type: object
      required:
        - market_id
        - side
        - type
        - size
      properties:
        market_id:
          type: string
          pattern: '^[A-Z]{3,10}-[A-Z]{3,10}$'
          example: BTC-USDT
        side:
          type: integer
          enum: [1, 2]
          description: Order side (1=buy, 2=sell)
          example: 1
        type:
          type: string
          enum: [market, limit, stop, stop_limit, fok, ioc, post_only]
          example: limit
        price:
          type: string
          description: Order price (required for limit orders)
          example: "50000.00"
        size:
          type: string
          description: Order size
          example: "0.1"

    Order:
      type: object
      properties:
        id:
          type: string
          example: "1640995200123456789"
        user_id:
          type: integer
          example: 123
        market_id:
          type: string
          example: BTC-USDT
        side:
          type: integer
          enum: [1, 2]
          description: Order side (1=buy, 2=sell)
        type:
          type: string
          enum: [market, limit, stop, stop_limit, fok, ioc, post_only]
        status:
          type: string
          enum: [pending, open, filled, cancelled, failed, partially_filled]
        price:
          type: string
          example: "50000.00"
        size:
          type: string
          example: "0.1"
        filled_size:
          type: string
          example: "0.05"
        remaining_size:
          type: string
          example: "0.05"
        average_price:
          type: string
          example: "50100.00"
        total_fee:
          type: string
          example: "0.05"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        filled_at:
          type: string
          format: date-time
          nullable: true
        cancelled_at:
          type: string
          format: date-time
          nullable: true

    Trade:
      type: object
      properties:
        id:
          type: string
          example: "trade_123456789"
        market_id:
          type: string
          example: BTC-USDT
        taker_order_id:
          type: string
        maker_order_id:
          type: string
        taker_user_id:
          type: integer
        maker_user_id:
          type: integer
        price:
          type: string
          example: "50000.00"
        size:
          type: string
          example: "0.1"
        side:
          type: integer
          enum: [1, 2]
          description: Taker side (1=buy, 2=sell)
        fee:
          type: string
          example: "0.05"
        created_at:
          type: string
          format: date-time

    Balance:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        asset:
          type: string
          example: BTC
        available:
          type: string
          description: Available balance for trading
          example: "1.5"
        locked:
          type: string
          description: Balance locked in open orders
          example: "0.1"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # Error Schemas
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        details:
          type: string
          description: Additional error details

    ValidationError:
      type: object
      properties:
        error:
          type: string
          example: Validation failed
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: email
              message:
                type: string
                example: invalid email format

  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Authentication required

    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Insufficient permissions

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Resource not found

    ConflictError:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Resource already exists

    RateLimitError:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per window
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Remaining requests in current window
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Unix timestamp when window resets
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Too many requests

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Internal server error

tags:
  - name: Health
    description: Health check endpoints
  - name: Authentication
    description: User authentication and authorization
  - name: Two-Factor Authentication
    description: 2FA setup and management
  - name: API Keys
    description: API key management for programmatic access
  - name: Markets
    description: Market data and information
  - name: Trading
    description: Order placement and management
  - name: User
    description: User account and data management
  - name: WebSocket
    description: Real-time data streaming
  - name: Admin
    description: Administrative endpoints (admin access required) 